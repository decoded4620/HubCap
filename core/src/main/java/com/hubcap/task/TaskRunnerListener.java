package com.hubcap.task;

import com.hubcap.task.state.TaskRunnerState;

/*
 * #%L
 * HubCap-Core
 * %%
 * Copyright (C) 2016 decoded4620
 * %%
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * #L%
 */

/**
 * Constructor
 * 
 * @author Decoded4620 2016
 */
public interface TaskRunnerListener {

    /**
     * Invoked when this task first starts
     * 
     * @param runner
     *            The TaskRunner
     */
    public void onTaskStart(TaskRunner runner);

    /**
     * Invoked any time the task state changes
     * 
     * @param runner
     *            the Task Runner
     * @param state
     *            the current TaskRunnerState for this runner
     */
    public void onTaskStateChange(TaskRunner runner, TaskRunnerState state);

    /**
     * Invoked when the task thread has shutdown
     * 
     * @param runner
     *            the TaskRunner we're listening to
     * @param aggregatedResults
     *            the list of Object data aggregated by the task during its
     *            execution. The Task may spawn any number of child threads to
     *            parallelize the response data.
     */
    public void onTaskComplete(TaskRunner runner);

    /**
     * Invoked when data is received by the task.
     * 
     * @param runner
     *            the TaskRunner we're listening to
     */
    public void onTaskDataReceived(TaskRunner runner);

    /**
     * Invoked when there is a task Error.
     * 
     * @param runner
     *            the TaskRunner we're listening to
     * @param e
     *            the Exception generated by the TaskRunner (not thrown if
     *            handled by a runner listener)
     * @param canRecoverFromError
     *            a boolean, true if the TaskRunner will recover from this
     *            mishap. If false, the Runner will be 'retired' and a new
     *            runner will be added to the Thread Pool (This is handled by
     *            hub cap)
     */
    public void onTaskError(TaskRunner runner, Exception e, boolean canRecoverFromError);
}
